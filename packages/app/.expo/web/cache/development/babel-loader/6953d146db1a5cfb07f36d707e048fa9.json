{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/ivanroldanlusich/webDev/reddit-clone/packages/app/src/modules/subreddit/subredditHeaderInfo/ui/SubredditHeaderInfoView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSelector } from \"react-redux\";\nimport { useTheme } from \"@react-navigation/native\";\nimport { fontSizes } from \"../../../../styles\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nvar SubredditHeaderInfoView = function SubredditHeaderInfoView(props) {\n  var theme = useTheme();\n  var colors = theme.colors;\n  var subreddit = useSelector(function (state) {\n    return state.subreddit;\n  });\n  var name = subreddit.name,\n      joined = subreddit.joined,\n      isUserJoined = subreddit.isUserJoined,\n      description = subreddit.description,\n      adultContent = subreddit.adultContent,\n      topics = subreddit.topics;\n  var styles = StyleSheet.create({\n    mainContainer: {\n      paddingLeft: 10,\n      paddingRight: 10,\n      paddingTop: 20,\n      paddingBottom: 25\n    },\n    subredditPicture: {\n      borderRadius: 100,\n      backgroundColor: \"skyblue\",\n      height: 50,\n      width: 50,\n      position: \"absolute\",\n      bottom: -5,\n      left: 10\n    },\n    subredditPictureContainer: {\n      backgroundColor: colors.colorCard,\n      height: 45\n    },\n    infoContainer: {},\n    nameAndButtonContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"space-around\"\n    },\n    nameText: _objectSpread(_objectSpread({}, fontSizes.subredditHeaderNameFont), {}, {\n      color: colors.textMain,\n      flex: 1\n    }),\n    buttonContainer: {\n      height: 20,\n      borderRadius: 4,\n      borderWidth: 1,\n      borderColor: colors.linkColor,\n      padding: 10,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    button: {\n      color: colors.linkColor,\n      fontWeight: \"bold\"\n    },\n    joinedButton: {},\n    joinButton: {},\n    membersContainer: {\n      marginTop: 10\n    },\n    membersText: {\n      color: colors.textMuted\n    },\n    descriptionContainer: {\n      marginTop: 10\n    },\n    descrptionText: {\n      color: colors.textMain\n    },\n    topicsContainer: {\n      flexDirection: \"row\",\n      marginTop: 10\n    },\n    topicText: {\n      color: colors.linkColorLight,\n      backgroundColor: colors.colorCard,\n      marginRight: 10,\n      borderRadius: 4,\n      padding: 2,\n      paddingLeft: 5,\n      paddingRight: 5\n    }\n  });\n\n  var handleJoinClick = function handleJoinClick() {};\n\n  var capitalizeWord = function capitalizeWord(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.subredditPictureContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.subredditPicture,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.mainContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.nameAndButtonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.nameText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }, \"r/\", name), React.createElement(TouchableOpacity, {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"JOIN\"))), React.createElement(View, {\n    style: styles.membersContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.membersText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, joined, \" members\")), React.createElement(View, {\n    style: styles.descriptionContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.descrptionText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, description)), React.createElement(View, {\n    style: styles.topicsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, topics.map(function (topic, index) {\n    return React.createElement(Text, {\n      style: styles.topicText,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }, capitalizeWord(topic));\n  }))));\n};\n\nexport default SubredditHeaderInfoView;","map":{"version":3,"sources":["/home/ivanroldanlusich/webDev/reddit-clone/packages/app/src/modules/subreddit/subredditHeaderInfo/ui/SubredditHeaderInfoView.tsx"],"names":["React","useSelector","useTheme","fontSizes","TouchableOpacity","SubredditHeaderInfoView","props","theme","colors","subreddit","state","name","joined","isUserJoined","description","adultContent","topics","styles","StyleSheet","create","mainContainer","paddingLeft","paddingRight","paddingTop","paddingBottom","subredditPicture","borderRadius","backgroundColor","height","width","position","bottom","left","subredditPictureContainer","colorCard","infoContainer","nameAndButtonContainer","flexDirection","alignItems","justifyContent","nameText","subredditHeaderNameFont","color","textMain","flex","buttonContainer","borderWidth","borderColor","linkColor","padding","button","fontWeight","joinedButton","joinButton","membersContainer","marginTop","membersText","textMuted","descriptionContainer","descrptionText","topicsContainer","topicText","linkColorLight","marginRight","handleJoinClick","capitalizeWord","str","charAt","toUpperCase","slice","map","topic","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, Text, StyleSheet, Button } from \"react-native\";\nimport { useSelector } from \"react-redux\";\nimport { State } from \"@reddit-clone/controller\";\nimport { useTheme } from \"@react-navigation/native\";\nimport { ThemeColors } from \"../../../../themes/themes\";\nimport { fontSizes } from \"../../../../styles\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\ninterface Props {\n  joinOrLeaveSubreddit: (subName: string) => void;\n}\n\nconst SubredditHeaderInfoView = (props: Props) => {\n  const theme = useTheme();\n  const colors = theme.colors as ThemeColors;\n  const subreddit = useSelector((state: State) => state.subreddit);\n\n  const {\n    name,\n    joined,\n    isUserJoined,\n    description,\n    adultContent,\n    topics,\n  } = subreddit;\n\n  const styles = StyleSheet.create({\n    mainContainer: {\n      paddingLeft: 10,\n      paddingRight: 10,\n      paddingTop: 20,\n      paddingBottom: 25,\n    },\n    subredditPicture: {\n      borderRadius: 100,\n      backgroundColor: \"skyblue\",\n      height: 50,\n      width: 50,\n      position: \"absolute\",\n      bottom: -5,\n      left: 10,\n    },\n    subredditPictureContainer: {\n      backgroundColor: colors.colorCard,\n      height: 45,\n    },\n    infoContainer: {},\n    nameAndButtonContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"space-around\",\n    },\n    nameText: {\n      ...fontSizes.subredditHeaderNameFont,\n      color: colors.textMain,\n      flex: 1,\n    },\n    buttonContainer: {\n      height: 20,\n      borderRadius: 4,\n      borderWidth: 1,\n      borderColor: colors.linkColor,\n      padding: 10,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    button: {\n      color: colors.linkColor,\n      fontWeight: \"bold\",\n    },\n    joinedButton: {},\n    joinButton: {},\n    membersContainer: { marginTop: 10 },\n    membersText: {\n      color: colors.textMuted,\n    },\n    descriptionContainer: { marginTop: 10 },\n    descrptionText: {\n      color: colors.textMain,\n    },\n    topicsContainer: {\n      flexDirection: \"row\",\n      marginTop: 10,\n    },\n    topicText: {\n      color: colors.linkColorLight,\n      backgroundColor: colors.colorCard,\n      marginRight: 10,\n      borderRadius: 4,\n      padding: 2,\n      paddingLeft: 5,\n      paddingRight: 5,\n    },\n  });\n\n  const handleJoinClick = () => {};\n\n  const capitalizeWord = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  };\n\n  return (\n    <React.Fragment>\n      <View style={styles.subredditPictureContainer}>\n        <View style={styles.subredditPicture} />\n      </View>\n      <View style={styles.mainContainer}>\n        <View style={styles.nameAndButtonContainer}>\n          <Text style={styles.nameText}>r/{name}</Text>\n          <TouchableOpacity style={styles.buttonContainer}>\n            <Text style={styles.button}>JOIN</Text>\n          </TouchableOpacity>\n        </View>\n        <View style={styles.membersContainer}>\n          <Text style={styles.membersText}>{joined} members</Text>\n        </View>\n        <View style={styles.descriptionContainer}>\n          <Text style={styles.descrptionText}>{description}</Text>\n        </View>\n        <View style={styles.topicsContainer}>\n          {topics.map((topic: string, index: number) => {\n            return (\n              <Text style={styles.topicText} key={index}>\n                {capitalizeWord(topic)}\n              </Text>\n            );\n          })}\n        </View>\n      </View>\n    </React.Fragment>\n  );\n};\n\nexport default SubredditHeaderInfoView;\n"]},"metadata":{},"sourceType":"module"}