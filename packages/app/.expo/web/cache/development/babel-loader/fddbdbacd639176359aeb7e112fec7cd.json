{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/ivanroldanlusich/webDev/reddit-clone/packages/app/src/modules/subreddit/subredditPosts/ui/PostsView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport PostConnector from \"../../../post/PostConnector\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\n\nvar PostsView = function PostsView(props) {\n  var setHeaderHeight = props.setHeaderHeight,\n      currentHeight = props.currentHeight;\n  var subreddit = useSelector(function (state) {\n    return state.subreddit;\n  });\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return React.createElement(PostConnector, {\n      postInfo: _objectSpread(_objectSpread({}, item), {}, {\n        index: index\n      }),\n      reducer: \"subreddit\",\n      showSubredditName: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var handleScroll = function handleScroll(event) {\n    var scrollDistance = event.nativeEvent.contentOffset.y;\n    console.log(\"scroll distance\", scrollDistance);\n\n    if (scrollDistance > 200) {\n      setHeaderHeight({\n        height: 0\n      });\n    } else {\n      setHeaderHeight({\n        height: (200 - scrollDistance) / 200\n      });\n    }\n  };\n\n  return React.createElement(FlatList, {\n    scrollEventThrottle: 16,\n    data: subreddit.posts,\n    renderItem: renderItem,\n    onScroll: handleScroll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default PostsView;","map":{"version":3,"sources":["/home/ivanroldanlusich/webDev/reddit-clone/packages/app/src/modules/subreddit/subredditPosts/ui/PostsView.tsx"],"names":["React","useSelector","PostConnector","PostsView","props","setHeaderHeight","currentHeight","subreddit","state","renderItem","item","index","handleScroll","event","scrollDistance","nativeEvent","contentOffset","y","console","log","height","posts"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAiD,OAAjD;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,aAAP;;;AAkBA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAkB;AAAA,MAC1BC,eAD0B,GACSD,KADT,CAC1BC,eAD0B;AAAA,MACTC,aADS,GACSF,KADT,CACTE,aADS;AAElC,MAAMC,SAAS,GAAGN,WAAW,CAAC,UAACO,KAAD;AAAA,WAAkBA,KAAK,CAACD,SAAxB;AAAA,GAAD,CAA7B;;AAEA,MAAME,UAAU,GAAG,SAAbA,UAAa,OAA0B;AAAA,QAAvBC,IAAuB,QAAvBA,IAAuB;AAAA,QAAjBC,KAAiB,QAAjBA,KAAiB;AAC3C,WACE,oBAAC,aAAD;AACE,MAAA,QAAQ,kCAAOD,IAAP;AAAaC,QAAAA,KAAK,EAALA;AAAb,QADV;AAEE,MAAA,OAAO,EAAC,WAFV;AAGE,MAAA,iBAAiB,EAAE,KAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GARD;;AAUA,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAoD;AACvE,QAAMC,cAAc,GAAGD,KAAK,CAACE,WAAN,CAAkBC,aAAlB,CAAgCC,CAAvD;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,cAA/B;;AACA,QAAIA,cAAc,GAAG,GAArB,EAA0B;AACxBT,MAAAA,eAAe,CAAC;AAAEe,QAAAA,MAAM,EAAE;AAAV,OAAD,CAAf;AACD,KAFD,MAEO;AACLf,MAAAA,eAAe,CAAC;AAAEe,QAAAA,MAAM,EAAE,CAAC,MAAMN,cAAP,IAAyB;AAAnC,OAAD,CAAf;AACD;AACF,GATD;;AAWA,SACE,oBAAC,QAAD;AACE,IAAA,mBAAmB,EAAE,EADvB;AAEE,IAAA,IAAI,EAAEP,SAAS,CAACc,KAFlB;AAGE,IAAA,UAAU,EAAEZ,UAHd;AAIE,IAAA,QAAQ,EAAEG,YAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAjCD;;AAmCA,eAAeT,SAAf","sourcesContent":["import React, { useState, useLayoutEffect } from \"react\";\nimport { State } from \"@reddit-clone/controller\";\nimport { useSelector } from \"react-redux\";\nimport PostConnector from \"../../../post/PostConnector\";\nimport {\n  ScrollView,\n  FlatList,\n  NativeSyntheticEvent,\n  NativeScrollEvent,\n  Dimensions,\n  Text,\n  View,\n} from \"react-native\";\nimport { useRoute } from \"@react-navigation/native\";\nimport SubredditHeaderInfoConnector from \"../../subredditHeaderInfo/SubredditHeaderInfoConnector\";\n\ninterface Props {\n  setHeaderHeight: any;\n  currentHeight: number;\n}\n\nconst PostsView = (props: Props) => {\n  const { setHeaderHeight, currentHeight } = props;\n  const subreddit = useSelector((state: State) => state.subreddit);\n\n  const renderItem = ({ item, index }: any) => {\n    return (\n      <PostConnector\n        postInfo={{ ...item, index }}\n        reducer=\"subreddit\"\n        showSubredditName={false}\n      />\n    );\n  };\n\n  const handleScroll = (event: NativeSyntheticEvent<NativeScrollEvent>) => {\n    const scrollDistance = event.nativeEvent.contentOffset.y;\n\n    console.log(\"scroll distance\", scrollDistance);\n    if (scrollDistance > 200) {\n      setHeaderHeight({ height: 0 });\n    } else {\n      setHeaderHeight({ height: (200 - scrollDistance) / 200 });\n    }\n  };\n\n  return (\n    <FlatList\n      scrollEventThrottle={16}\n      data={subreddit.posts}\n      renderItem={renderItem}\n      onScroll={handleScroll}\n    />\n  );\n};\n\nexport default PostsView;\n\n/*\n<ScrollView >\n      {subreddit.posts.map((post, index) => {\n        return (\n          <PostConnector\n            key={index}\n            postInfo={{ ...post, index }}\n            showSubredditName={false}\n            reducer=\"subreddit\"\n          />\n        );\n      })}\n      {subreddit.posts.map((post, index) => {\n        return (\n          <PostConnector\n            key={index}\n            postInfo={{ ...post, index }}\n            showSubredditName={false}\n            reducer=\"subreddit\"\n          />\n        );\n      })}\n    </ScrollView>\n    */\n\n/*\n<FlatList\n        scrollEventThrottle={16}\n        data={subreddit.posts}\n        renderItem={renderItem}\n        onScroll={handleScroll}\n      />\n */\n"]},"metadata":{},"sourceType":"module"}