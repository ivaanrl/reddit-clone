{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/ivanroldanlusich/webDev/reddit-clone/packages/app/src/modules/post/ui/PostView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Vote from \"../vote/Vote\";\nimport HTML from \"react-native-render-html\";\nimport { useTheme, useNavigation } from \"@react-navigation/native\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\nimport { postStyles, fontSizes } from \"../../../styles\";\n\nvar PostView = function PostView(props) {\n  var navigation = useNavigation();\n  var theme = useTheme();\n  var colors = theme.colors;\n  var sanitizeContent = props.sanitizeContent,\n      formatDate = props.formatDate,\n      vote = props.vote,\n      showSubredditName = props.showSubredditName,\n      reducer = props.reducer,\n      postInfo = props.postInfo;\n  var author_username = postInfo.author_username,\n      content = postInfo.content,\n      createdAt = postInfo.createdAt,\n      subreddit_name = postInfo.subreddit_name,\n      votes = postInfo.votes,\n      title = postInfo.title,\n      id = postInfo.id,\n      user_vote = postInfo.user_vote,\n      index = postInfo.index,\n      comment_count = postInfo.comment_count,\n      type = postInfo.type,\n      link = postInfo.link;\n\n  var handleSubredditNameClick = function handleSubredditNameClick() {\n    navigation.navigate(\"subreddit\", {\n      name: subreddit_name\n    });\n  };\n\n  var styles = StyleSheet.create({\n    mainContainer: {\n      padding: 10,\n      marginBottom: 10,\n      backgroundColor: colors.colorCard\n    },\n    headerContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\"\n    },\n    headerTextContainer: {},\n    subredditIcon: {\n      height: 30,\n      width: 30,\n      backgroundColor: \"blue\",\n      borderRadius: 100,\n      marginRight: 15\n    },\n    subredditNameContainer: {},\n    subredditName: {\n      color: colors.textMain\n    },\n    postCreatedByInfo: {\n      flexDirection: \"row\"\n    },\n    postedBy: {\n      color: colors.textMuted\n    },\n    authorUsername: {},\n    authorUsernameText: {\n      color: colors.textMuted\n    },\n    dateText: {\n      color: colors.textMuted\n    },\n    dotSeparator: {},\n    titleContainer: {},\n    title: _objectSpread(_objectSpread(_objectSpread({}, fontSizes.postTitleFont), postStyles.title), {}, {\n      color: colors.textMain\n    }),\n    postContainer: {\n      paddingLeft: 5\n    },\n    postContent: {\n      color: colors.textMain\n    },\n    imagePostContainer: {},\n    imagePost: {\n      aspectRatio: 16 / 9\n    },\n    bottomBarContainer: _objectSpread({}, postStyles.bottomBarMainContainer),\n    voteContainer: {},\n    commentCountContainer: _objectSpread({}, postStyles.bottomBarContainer),\n    commentCountIcon: {\n      color: colors.textMuted,\n      fontSize: 15,\n      marginRight: 10\n    },\n    savePostContainer: {},\n    bookmarkContainer: _objectSpread(_objectSpread({}, postStyles.bottomBarContainer), {}, {\n      marginRight: 10\n    }),\n    bookmarIcon: {\n      color: colors.textMuted,\n      fontSize: 15,\n      marginRight: 10\n    },\n    bottomBarText: {\n      color: colors.textMuted\n    }\n  });\n  return React.createElement(View, {\n    style: styles.mainContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.headerContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, showSubredditName ? React.createElement(TouchableOpacity, {\n    style: styles.subredditIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }) : null, React.createElement(View, {\n    style: styles.headerTextContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, showSubredditName ? React.createElement(TouchableOpacity, {\n    style: styles.subredditNameContainer,\n    onPress: handleSubredditNameClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.subredditName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }, subreddit_name)) : null, React.createElement(View, {\n    style: styles.postCreatedByInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, showSubredditName ? React.createElement(Text, {\n    style: styles.postedBy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, \"Posted by \") : null, React.createElement(TouchableOpacity, {\n    style: styles.authorUsername,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.authorUsernameText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, \"u/\", author_username, \" \")), React.createElement(View, {\n    style: styles.dotSeparator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.dateText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, formatDate(createdAt))))), React.createElement(TouchableOpacity, {\n    style: styles.titleContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, title)), type === \"post\" ? React.createElement(TouchableOpacity, {\n    style: styles.postContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, React.createElement(HTML, {\n    tagsStyles: {\n      i: {\n        color: colors.textMain\n      },\n      p: {\n        color: colors.textMain\n      },\n      b: {\n        color: colors.textMain\n      }\n    },\n    html: sanitizeContent(content).__html,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  })) : null, type === \"image\" && link ? React.createElement(TouchableOpacity, {\n    style: styles.imagePostContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, React.createElement(Image, {\n    style: styles.imagePost,\n    source: {\n      uri: link\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  })) : null, React.createElement(View, {\n    style: styles.bottomBarContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.voteContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, React.createElement(Vote, {\n    id: id,\n    index: index,\n    votes: votes,\n    user_vote: user_vote,\n    votePost: vote,\n    showCount: true,\n    child: false,\n    reducer: reducer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  })), React.createElement(TouchableOpacity, {\n    style: styles.commentCountContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }, React.createElement(Icon, {\n    name: \"comment\",\n    style: styles.commentCountIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    style: styles.bottomBarText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }\n  }, comment_count)), React.createElement(TouchableOpacity, {\n    style: styles.bookmarkContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }\n  }, React.createElement(Icon, {\n    name: \"bookmark\",\n    style: styles.bookmarIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 11\n    }\n  }), React.createElement(Text, {\n    style: styles.bottomBarText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n};\n\nexport default PostView;","map":{"version":3,"sources":["/home/ivanroldanlusich/webDev/reddit-clone/packages/app/src/modules/post/ui/PostView.tsx"],"names":["React","TouchableOpacity","Vote","HTML","useTheme","useNavigation","Icon","postStyles","fontSizes","PostView","props","navigation","theme","colors","sanitizeContent","formatDate","vote","showSubredditName","reducer","postInfo","author_username","content","createdAt","subreddit_name","votes","title","id","user_vote","index","comment_count","type","link","handleSubredditNameClick","navigate","name","styles","StyleSheet","create","mainContainer","padding","marginBottom","backgroundColor","colorCard","headerContainer","flexDirection","alignItems","headerTextContainer","subredditIcon","height","width","borderRadius","marginRight","subredditNameContainer","subredditName","color","textMain","postCreatedByInfo","postedBy","textMuted","authorUsername","authorUsernameText","dateText","dotSeparator","titleContainer","postTitleFont","postContainer","paddingLeft","postContent","imagePostContainer","imagePost","aspectRatio","bottomBarContainer","bottomBarMainContainer","voteContainer","commentCountContainer","commentCountIcon","fontSize","savePostContainer","bookmarkContainer","bookmarIcon","bottomBarText","i","p","b","__html","uri"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, StyleSheet, Text, Image } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Vote from \"../vote/Vote\";\nimport HTML from \"react-native-render-html\";\nimport { ThemeColors } from \"../../../themes/themes\";\nimport { useTheme, useNavigation } from \"@react-navigation/native\";\nimport Icon from \"react-native-vector-icons/FontAwesome\";\nimport { postStyles, fontSizes } from \"../../../styles\";\n\ninterface Props {\n  sanitizeContent: (content: string[] | null) => { __html: string };\n  formatDate: (date: string) => string;\n  postInfo: {\n    author_id: string;\n    author_username: string;\n    content: string[] | null;\n    createdAt: string;\n    updatedAt: string;\n    subreddit_name: string;\n    votes: string;\n    title: string;\n    id: string;\n    user_vote: number;\n    index: number;\n    comment_count: number;\n    link: string | null;\n    type: string;\n  };\n  reducer: string;\n  vote: (id: string, voteValue: number, index: number, reducer: string) => void;\n  showSubredditName: boolean;\n}\n\nconst PostView = (props: Props) => {\n  const navigation = useNavigation();\n  const theme = useTheme();\n  const colors = theme.colors as ThemeColors;\n  const {\n    sanitizeContent,\n    formatDate,\n    vote,\n    showSubredditName,\n    reducer,\n    postInfo,\n  } = props;\n  const {\n    author_username,\n    content,\n    createdAt,\n    subreddit_name,\n    votes,\n    title,\n    id,\n    user_vote,\n    index,\n    comment_count,\n    type,\n    link,\n  } = postInfo;\n\n  const handleSubredditNameClick = () => {\n    navigation.navigate(\"subreddit\", { name: subreddit_name });\n  };\n\n  const styles = StyleSheet.create({\n    mainContainer: {\n      padding: 10,\n      marginBottom: 10,\n      backgroundColor: colors.colorCard,\n    },\n    headerContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n    },\n    headerTextContainer: {},\n    subredditIcon: {\n      height: 30,\n      width: 30,\n      backgroundColor: \"blue\",\n      borderRadius: 100,\n      marginRight: 15,\n    },\n    subredditNameContainer: {},\n    subredditName: {\n      color: colors.textMain,\n    },\n    postCreatedByInfo: {\n      flexDirection: \"row\",\n    },\n    postedBy: {\n      color: colors.textMuted,\n    },\n    authorUsername: {},\n    authorUsernameText: { color: colors.textMuted },\n    dateText: { color: colors.textMuted },\n    dotSeparator: {},\n    titleContainer: {},\n    title: {\n      ...fontSizes.postTitleFont,\n      ...postStyles.title,\n      color: colors.textMain,\n    },\n    postContainer: { paddingLeft: 5 },\n    postContent: { color: colors.textMain },\n    imagePostContainer: {},\n    imagePost: {\n      aspectRatio: 16 / 9,\n    },\n    bottomBarContainer: {\n      ...postStyles.bottomBarMainContainer,\n    },\n    voteContainer: {},\n    commentCountContainer: {\n      ...postStyles.bottomBarContainer,\n    },\n    commentCountIcon: {\n      color: colors.textMuted,\n      fontSize: 15,\n      marginRight: 10,\n    },\n    savePostContainer: {},\n    bookmarkContainer: { ...postStyles.bottomBarContainer, marginRight: 10 },\n    bookmarIcon: { color: colors.textMuted, fontSize: 15, marginRight: 10 },\n    bottomBarText: {\n      color: colors.textMuted,\n    },\n  });\n\n  return (\n    <View style={styles.mainContainer}>\n      <View style={styles.headerContainer}>\n        {showSubredditName ? (\n          <TouchableOpacity style={styles.subredditIcon}></TouchableOpacity>\n        ) : null}\n        <View style={styles.headerTextContainer}>\n          {showSubredditName ? (\n            <TouchableOpacity\n              style={styles.subredditNameContainer}\n              onPress={handleSubredditNameClick}\n            >\n              <Text style={styles.subredditName}>{subreddit_name}</Text>\n            </TouchableOpacity>\n          ) : null}\n          <View style={styles.postCreatedByInfo}>\n            {showSubredditName ? (\n              <Text style={styles.postedBy}>Posted by </Text>\n            ) : null}\n            <TouchableOpacity style={styles.authorUsername}>\n              <Text style={styles.authorUsernameText}>\n                u/{author_username}{\" \"}\n              </Text>\n            </TouchableOpacity>\n            <View style={styles.dotSeparator} />\n            <Text style={styles.dateText}>{formatDate(createdAt)}</Text>\n          </View>\n        </View>\n      </View>\n      <TouchableOpacity style={styles.titleContainer}>\n        <Text style={styles.title}>{title}</Text>\n      </TouchableOpacity>\n\n      {type === \"post\" ? (\n        <TouchableOpacity style={styles.postContainer}>\n          <HTML\n            tagsStyles={{\n              i: {\n                color: colors.textMain,\n              },\n              p: { color: colors.textMain },\n              b: { color: colors.textMain },\n            }}\n            html={sanitizeContent(content).__html}\n          />\n        </TouchableOpacity>\n      ) : null}\n      {type === \"image\" && link ? (\n        <TouchableOpacity style={styles.imagePostContainer}>\n          <Image style={styles.imagePost} source={{ uri: link }} />\n        </TouchableOpacity>\n      ) : null}\n      <View style={styles.bottomBarContainer}>\n        <View style={styles.voteContainer}>\n          <Vote\n            id={id}\n            index={index}\n            votes={votes}\n            user_vote={user_vote}\n            votePost={vote}\n            showCount={true}\n            child={false}\n            reducer={reducer}\n          />\n        </View>\n        <TouchableOpacity style={styles.commentCountContainer}>\n          <Icon name=\"comment\" style={styles.commentCountIcon} />\n          <Text style={styles.bottomBarText}>{comment_count}</Text>\n        </TouchableOpacity>\n        <TouchableOpacity style={styles.bookmarkContainer}>\n          <Icon name=\"bookmark\" style={styles.bookmarIcon} />\n          <Text style={styles.bottomBarText}>Save</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n};\n\nexport default PostView;\n"]},"metadata":{},"sourceType":"module"}