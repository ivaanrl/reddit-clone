{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/ivanroldanlusich/webDev/reddit-clone/packages/app/src/modules/header/searchBar/ui/SearchBarView.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { TextInput, TouchableOpacity } from \"react-native-gesture-handler\";\nimport { useTheme, useNavigation, useRoute } from \"@react-navigation/native\";\nimport { inputStyles } from \"../../../../styles\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\n\nvar SearchBarView = function SearchBarView(props) {\n  var search = props.search;\n  var navigation = useNavigation();\n  var route = useRoute();\n  var theme = useTheme();\n  var colors = theme.colors;\n  var screenWidth = Math.round(Dimensions.get(\"window\").width);\n  var styles = StyleSheet.create({\n    searchBarContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      width: screenWidth - 80\n    },\n    searchBarIconContainer: {\n      backgroundColor: colors.inputBackground,\n      height: 37,\n      width: 25,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      borderTopLeftRadius: 4,\n      borderBottomLeftRadius: 4\n    },\n    searchBarIcon: {\n      color: colors.textMuted\n    },\n    searchBarInput: _objectSpread(_objectSpread({}, inputStyles.input), {}, {\n      backgroundColor: colors.inputBackground,\n      color: colors.textMain,\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n      height: 37,\n      flex: 1\n    })\n  });\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchValue = _useState2[0],\n      setSearchValue = _useState2[1];\n\n  useEffect(function () {\n    var params = route.params;\n\n    if (params && params.name !== \"\") {\n      setSearchValue(\"r/\" + params.name);\n    }\n  }, [route]);\n\n  var handleSearchChange = function handleSearchChange(event) {\n    var searchValue = event.nativeEvent.text;\n    setSearchValue(searchValue);\n\n    if (searchValue.length > 0) {\n      search(searchValue);\n    }\n  };\n\n  var navigateToSearchResults = function navigateToSearchResults() {\n    navigation.navigate(\"searchResults\");\n  };\n\n  return React.createElement(TouchableOpacity, {\n    style: styles.searchBarContainer,\n    onPress: navigateToSearchResults,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.searchBarIconContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, React.createElement(Icon, {\n    name: \"search\",\n    style: styles.searchBarIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  })), React.createElement(TextInput, {\n    value: searchValue,\n    onChange: handleSearchChange,\n    style: styles.searchBarInput,\n    placeholder: \"Search\",\n    placeholderTextColor: colors.textMuted,\n    onFocus: navigateToSearchResults,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default SearchBarView;","map":{"version":3,"sources":["/home/ivanroldanlusich/webDev/reddit-clone/packages/app/src/modules/header/searchBar/ui/SearchBarView.tsx"],"names":["React","useState","useEffect","TextInput","TouchableOpacity","useTheme","useNavigation","useRoute","inputStyles","Icon","SearchBarView","props","search","navigation","route","theme","colors","screenWidth","Math","round","Dimensions","get","width","styles","StyleSheet","create","searchBarContainer","flexDirection","alignItems","searchBarIconContainer","backgroundColor","inputBackground","height","justifyContent","borderTopLeftRadius","borderBottomLeftRadius","searchBarIcon","color","textMuted","searchBarInput","input","textMain","flex","searchValue","setSearchValue","params","name","handleSearchChange","event","nativeEvent","text","length","navigateToSearchResults","navigate"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  NativeSyntheticEvent,\n  TextInputChangeEventData,\n  StyleSheet,\n  Dimensions,\n} from \"react-native\";\nimport { TextInput, TouchableOpacity } from \"react-native-gesture-handler\";\nimport { useTheme, useNavigation, useRoute } from \"@react-navigation/native\";\nimport { ThemeColors } from \"../../../../themes/themes\";\nimport { inputStyles } from \"../../../../styles\";\nimport Icon from \"react-native-vector-icons/FontAwesome\";\n\ninterface Props {\n  search: (searchValue: string) => void;\n}\n\nconst SearchBarView = (props: Props) => {\n  const { search } = props;\n  const navigation = useNavigation();\n  const route = useRoute();\n  const theme = useTheme();\n  const colors = theme.colors as ThemeColors;\n  const screenWidth = Math.round(Dimensions.get(\"window\").width);\n\n  const styles = StyleSheet.create({\n    searchBarContainer: {\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      width: screenWidth - 80,\n    },\n    searchBarIconContainer: {\n      backgroundColor: colors.inputBackground,\n      height: 37,\n      width: 25,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      borderTopLeftRadius: 4,\n      borderBottomLeftRadius: 4,\n    },\n    searchBarIcon: {\n      color: colors.textMuted,\n    },\n    searchBarInput: {\n      ...inputStyles.input,\n      backgroundColor: colors.inputBackground,\n      color: colors.textMain,\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n      height: 37,\n      flex: 1,\n    },\n  });\n\n  const [searchValue, setSearchValue] = useState<string>(\"\");\n\n  useEffect(() => {\n    const params = route.params as { name: string };\n    if (params && params.name !== \"\") {\n      setSearchValue(\"r/\" + params.name);\n    }\n  }, [route]);\n\n  const handleSearchChange = (\n    event: NativeSyntheticEvent<TextInputChangeEventData>\n  ) => {\n    const searchValue = event.nativeEvent.text;\n    setSearchValue(searchValue);\n    if (searchValue.length > 0) {\n      search(searchValue);\n    }\n  };\n\n  const navigateToSearchResults = () => {\n    navigation.navigate(\"searchResults\");\n  };\n\n  return (\n    <TouchableOpacity\n      style={styles.searchBarContainer}\n      onPress={navigateToSearchResults}\n    >\n      <View style={styles.searchBarIconContainer}>\n        <Icon name=\"search\" style={styles.searchBarIcon} />\n      </View>\n\n      <TextInput\n        value={searchValue}\n        onChange={handleSearchChange}\n        style={styles.searchBarInput}\n        placeholder=\"Search\"\n        placeholderTextColor={colors.textMuted}\n        onFocus={navigateToSearchResults}\n      />\n    </TouchableOpacity>\n  );\n};\n\nexport default SearchBarView;\n"]},"metadata":{},"sourceType":"module"}